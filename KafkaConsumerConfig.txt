@Configuration
@EnableKafka
public class KafkaConsumerConfig {

    @Value("${kafka.server.uri}")
    private String kafkaServer;
    @Value("${kafka.topic.review.name.id}")
    private String reviewTopicId;
    @Bean
    public ConsumerFactory<String, UpdateRestaurantRatingDTO> userConsumerFactory() {
        Map<String, Object> configs = new HashMap<>();
        configs.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaServer);
        configs.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        configs.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class);
        configs.put(ConsumerConfig.GROUP_ID_CONFIG, reviewTopicId);
        return new DefaultKafkaConsumerFactory<>(configs, new StringDeserializer(), new JsonDeserializer<>(UpdateRestaurantRatingDTO.class));
    }

    @Bean
    public ConcurrentKafkaListenerContainerFactory<String, UpdateRestaurantRatingDTO> userKafkaListenerContainerFactory() {
        ConcurrentKafkaListenerContainerFactory<String, UpdateRestaurantRatingDTO> factory =
                new ConcurrentKafkaListenerContainerFactory<String, UpdateRestaurantRatingDTO>();
        factory.setConsumerFactory(userConsumerFactory());
        return factory;
    }
}
